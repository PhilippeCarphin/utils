#+TITLE: link-pwd : A quick link handlink tool



* SINOPSIS

  #+BEGIN_SRC sh
  link-pwd <command> [-jp|--just-print] [-g|--group]
  #+END_SRC

* DESCRIPTION


Creates links as described in a file called *Linkfile* with save and restore
capabilities.

The *Linkfile* has two columns :

#+BEGIN_SRC sh
  $HOME/.zprofile     zprofile
  $HOME/.zshrc        zshrc
  $HOME/.zshenv       zshenv
  $HOME/.zsh_custom   zsh_custom
#+END_SRC

/target/ and /my_file/. The script will save
/target/ as a /restore_file/ in $PWD and replace /target/ with a link pointing
to /my_file/.

#+BEGIN_SRC sh
  link-pwd <command> [-jp|--just-print] [-g|--group]
#+END_SRC

** Status

/status/ will only show the states of /target/, /my_file/ and any /restore/
files that are present.

** Link

Save /target/ as /$PWD/target/.restore/ or /$PWD/target.delete/ depending on if
/target/ existed or not.

The script *will refuse to do anything whatsoever with anything that is not a
link*. If any of the /target/ files are something else than links we're not
touching them. If they are links they will be saved and you can do status to be
sure.

The *saved state can be that the file doesn't exist.*  If /target/ does not
exist and /link-pwd/ creates it, it will delete it on /restore/.  This also
implies that */my_file/* does not need to exist.*

** Unlink

Save /target/ links as /$PWD/target/.restore/ 
** forget

The intended use is to put something somewhere and do just-print
and check that everything's ok

#+BEGIN_SRC sh :dir ~/Documents/GitHub/pyenv/
link-pwd link --just-print
#+END_SRC

Then link

#+BEGIN_SRC sh
link-pwd link
#+END_SRC

Make sure that everything is OK:

#+BEGIN_SRC sh
link-pwd status
#+END_SRC

And clear up the restore files.

#+BEGIN_SRC sh
link-pwd forget
#+END_SRC

Or it can be for something temporary like trying out an emacs configuration.  I
have this for a side config that I use to experiment

#+BEGIN_SRC sh
# source               my_file
$HOME/.emacs           emacs
$HOME/.emacs.d         emacs.d
$HOME/.spacemacs       spacemacs
$HOME/.spacemacs.d     spacemacs.d
#+END_SRC

My regular config has /.emacs.d/, /.spacemacs.d/ and /.spacemacs/.  And this
side config has just an /emacs.d/.  The other ones dont exist.  And when I do
link, the script will delete =$HOME/.spacemacs= and so on so that the files in
the left column mimick the state of existence or non-existence of the files in
the left column.

* OPTIONS
** -jp, --just-print

Show only output of what the command would do.

** -f, --file

Use other file than Linkfile.  I've made it so that it has to be in $PWD while
you call this tool because there are less chances of things going wrong.

** -g, --group

Files can have groups of links allowing to link or unlink only certain files.

#+BEGIN_SRC 
[git]
  $HOME/.gitconfig gitconfig
  $HOME/.gitignore.global gitignore.global
[spacemacs]
  $HOME/.spacemacs spacemacs
  $HOME/.spacemacs.d spacemacs.d
  $HOME/.emacs.d/private emacs.d/private
[tmux]
  $HOME/.tmux.conf tmux.conf
[zhs]
  $HOME/.zprofile zprofile
  $HOME/.zshrc zshrc
  $HOME/.zshenv zshenv
  $HOME/.zsh_custom zsh_custom
#+END_SRC
