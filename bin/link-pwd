#!/bin/bash
#
cmd=$(basename $0)
################################################################################
# Save is either saving a copy of the link or remembering that there was nothing
# there
################################################################################
save_src(){
    local src=$1

    if ! [ -e $src ] ; then
        echo "$(tput setaf 5)REMEMBERING that there was no $src file by touching $(basename $src).delete$(tput sgr 0)"
        touch $(basename $src).delete
    else
        echo "$(tput setaf 2)SAVING $src as $(basename $src).restore$(tput sgr 0)"
        mv $src $(basename $src).restore
    fi
}
################################################################################
# Restore by either deleting or squashing with the saved file
################################################################################
restore_src(){
    local src=$1
    local base_src=$(basename $src)
    local restoration_file=$(find . -name "$base_src.restore" -o -name "$base_src.delete" | tail -1)

    if [ -z $restoration_file ] || ! [ -e $restoration_file ] ; then
        return 0
    fi

    if [[ $restoration_file == *restore ]] ; then
        echo "$(tput setaf 3)RESTORING $src from $restoration_file$(tput sgr 0)"
        # Note that the -T option doesn't work on OSX's mv command so I have to
        # remove the link first otherwise, it might move $restoration_file
        # into the directory pointed to by $src
        rm -f $src
        mv $restoration_file $src
    elif [[ $restoration_file == *delete ]] && [ -L $src ] ; then
        echo "$(tput setaf 1)DELETING link $src$(tput sgr 0)"
        rm -f $src
        rm $restoration_file
    fi
}

################################################################################
# Create a link for the file if the target exitst in pwd
################################################################################
maybe_link(){
    local target=$1
    local link_name=$2

    if [ -e $target ] ; then
       echo "$(tput setaf 4)LINKING $link_name --> $target$(tput sgr 0)"
       ln -s $target $link_name
    fi
}

unlink_src(){
    local src=$1

    if [ -e $src ] && ! [ -L $src ] ; then
        echo "$cmd : ERROR : unlink_src : src=$src exits and is not a link"
        exit 1
    fi

    if [ -e $target ] ; then
        echo "$(tput setaf 1)DELETING link $src$(tput sgr 0)"
        rm -f $src
    fi
}

save_and_link(){
    src=$1
    my_file=$2
    save_src $src $my_file
    maybe_link $my_file $src
}

status()
{
    src=$1
    my_file=$2
    local base_src=$(basename $src)
    local delete_file="$base_src.delete"
    local restore_file="$base_src.restore"

    if ! [ -z $delete_file ] && [ -e $delete_file ] ; then
        echo "$(tput setaf 1)$delete_file : $(ls -s $src | tr -s ' ' | cut -d ' ' -f 9,10,11)$(tput sgr 0)"
    fi

    if ! [ -z $restore_file ] && [ -e $restore_file ] ; then
        echo "$(tput setaf 3)$(ls -l $restore_file | tr -s ' ' | cut -d ' ' -f 9,10,11)$(tput sgr 0)"
    fi

    if [ -e $src ] && [ -L $src ] ; then
        echo "$(tput setaf 4)$(ls -l $src | tr -s ' ' | cut -d ' ' -f 9,10,11)$(tput sgr 0)"
    elif [ -e $src ] ; then
        echo "$(tput setaf 1)$(ls -l $src | tr -s ' ' | cut -d ' ' -f 9,10,11)$(tput sgr 0)"
    fi

    if [ -e $my_file ] ; then
        echo "$(tput setaf 2)$(ls -l $my_file | tr -s ' ' | cut -d ' ' -f 9,10,11)$(tput sgr 0)"
    fi
}

################################################################################
# Execution
################################################################################
this_dir=$PWD

################## VALIDATION There must be a Linkfile #########################
if ! [ -e Linkfile ] ; then
    echo "$cmd : ERROR : No Linkfile in PWD"
    exit 1
fi

################## VALIDATION all source files must be links ###################
if [[ "$1" != status ]] ; then
    i=1
    while read col1 extra ; do
        if [[ "$col1" != \#* ]] ; then
            src=$(eval echo $col1)
            if [ -e $src ] && ! [ -L $src ] ; then
                echo "$cmd : ERROR : Linkfile line $i : src=$col1 exists and is not a link"
                errors=true
            fi
        fi
        i=$(($i + 1))
    done < Linkfile

    if [[ $errors == true ]] ; then
    exit
    fi
fi

##################### Action based on presence of token file ###################
if [[ "$1" == forget ]] ; then
    rm -f ACTIVE
    rm -f *.restore .*.restore
    rm -f *.delete .*.delete
    exit 0
elif [[ "$1" == unlink ]] ; then
    action=save_src
    touch ./ACTIVE
elif [[ "$1" == status ]] ; then
    action=status
else
    if [ -e ./ACTIVE ] ; then
        action=restore_src
        rm ./ACTIVE
    else
        action=save_and_link
        touch ./ACTIVE
    fi
fi

################# Iterateion on the lines of the file ##########################
while read column_1 column_2 extra ; do

   if [[ "$column_1" = \#* ]] ; then
      continue
   fi

   src=$(eval echo $column_1)
   my_file=$this_dir/$(eval echo $column_2)

   $action $src $my_file

done < Linkfile
